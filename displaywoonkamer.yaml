substitutions:
  name: "mypanel-woonkamer-sdl2"
  friendly_name: "Guition480-basic"

packages:
  # for simulation turn on device_sdl and turn off device_base
  device_base: !include packages/display_base.yaml
  #device_sdl: !include packages/display_sdl.yaml
  common_code: !include 
    file: packages/common_code.yaml  
    vars:
      name: "${name}"
      friendly_name: "${friendly_name}" 
      knop: "${knop}"
  start_page: !include 
    file: packages/startscherm.yaml
    vars:
      knop: "${knop}" 
  room_page: !include 
    file: packages/studeerkamer.yaml
    vars:
      knop: "${knop}" 
  woon_page: !include 
    file: packages/woonkamer.yaml
    vars:
      knop: "${knop}" 
  keuken_page: !include 
    file: packages/keuken.yaml
    vars:
      knop: "${knop}" 

  weather_page: !include
    file: packages/weather.yaml
    vars:
      knop: "${knop}" 
    


api:
  on_client_connected:
    - if:
        condition:
          lambda: 'return (0 == client_info.find("Home Assistant "));'
        then:
          - lvgl.widget.show: lbl_hastatus
  on_client_disconnected:
    - if:
        condition:
          lambda: 'return (0 == client_info.find("Home Assistant "));'
        then:
          - lvgl.widget.hide: lbl_hastatus    

lvgl:
  top_layer:
    widgets:
    - obj:
        styles: header_footer
        text_font: roboto20
        height: 30
        bg_color: 0x1c1c1c
        border_color: 0x1c1c1c 
        border_width: 0
        text_color: tft_white
        radius: 0
        scrollbar_mode: "OFF"
        align: top_left  
        widgets:  
          - label:
              align: top_right
              x: -2
              y: -10
              text: "\U000F05A9"
              id: lbl_hastatus
              hidden: true
          - label: 
              align: top_left
              y: -10
              id: title_time
              text: "00:00"
          - label: 
              align_to:
                id: title_time
                align: out_right_mid
              y: -5
              id: stookwijzer_label
              text: " \U000F0238"

          - label:
              align_to:
                id: stookwijzer_label
                align: out_right_mid
              y: -10
              id: afval_label2
              text: " Morgen: "
          
          - label:
              align_to:
                id: afval_label2
                align: out_right_mid
              y: -10
              id: afval_label
          
              
    - ${knop}matrix:
        align: bottom_mid
        styles: header_footer
        radius: 0
        #id: top_layer
        rows:
           - buttons:
              - id: page_home
                text: "\U000F02DC"
                on_press:
                  then:
                    lvgl.page.show: start_page
              - id: page_woonkamer
                text: "\U000F04B9"
                on_press:
                  then:
                    lvgl.page.show: woonkamer_page
              - id: page_keuken
                text: "\U000F04DE"
                on_press:
                  then:
                    lvgl.page.show: keuken_page
              - id: page_studeerkamer
                text: "\U000F095F"
                on_press:
                  then:
                    lvgl.page.show: studeer_page
              - id: page_overig
                text: "${hammerscrewdriver}"
                # on_press:
                #   then:
                #     lvgl.page.show: overig_page

time:
  - platform: homeassistant
    id: time_comp
    on_time_sync:
      - script.execute: time_update
    on_time:
      - minutes: '*'
        seconds: '0'
        then:
          - script.execute: time_update

script:
# Time update  
  - id: time_update
    then:
      - lvgl.label.update:
          id: title_time
          text: !lambda |-
            static char time_buf[17];
            auto now = id(time_comp).now();
            snprintf(time_buf, sizeof(time_buf), "%2d:%02d ", now.hour, now.minute );
            return time_buf;      

text_sensor:
  - platform: homeassistant
    id: sensor_forecast
    entity_id: sensor.forecast
    attribute: forecast
    internal: true
    on_value:
      then:
        - lambda: |-
            // Check if the sensor has a valid state
            if (id(sensor_forecast).state.empty()) {
              ESP_LOGE("forecast_parse", "Forecast sensor state is empty.");
              return;
            }

            // Log the raw JSON
            ESP_LOGD("forecast_parse", "Raw Forecast JSON: %s", id(sensor_forecast).state.c_str());

            // Deserialize JSON forecast data
            DynamicJsonDocument doc(4096);
            auto err = deserializeJson(doc, id(sensor_forecast).state.c_str());
            if (err) {
              ESP_LOGE("forecast_parse", "Deserialization error: %s", err.c_str());
              return;
            }

            JsonArray root = doc.as<JsonArray>();
            for (int i = 0; i < 5; i++) {  // Zero-based
              if (i < root.size()) {
                JsonObject forecast_data = root[i];
                if (!forecast_data.isNull()) {
                  // Assign data to global variables
                  id(forecast_condition)[i + 1] = forecast_data["condition"].as<std::string>();
                  id(forecast_precip)[i + 1]    = forecast_data["precipitation"] | 0.0f;
                  id(forecast_temp_max)[i + 1]  = forecast_data["temperature"]   | 0.0f;
                  id(forecast_temp_min)[i + 1]  = forecast_data["templow"]       | 0.0f;

                  // Log individual forecasts
                  ESP_LOGD("forecast_parse", "Forecast Day %d: Condition='%s', Precipitation=%.1f mm, Temp Max=%.1f°C, Temp Min=%.1f°C", 
                           i + 1, id(forecast_condition)[i + 1].c_str(), 
                           id(forecast_precip)[i + 1], 
                           id(forecast_temp_max)[i + 1], 
                           id(forecast_temp_min)[i +1 ]);
                } else {
                  ESP_LOGW("forecast_parse", "Forecast Day %d: Data is null.", i + 1);
                }
              } else {
                ESP_LOGW("forecast_parse", "Forecast Day %d: Index out of array bounds.", i + 1);
              }
            }
      
  - platform: homeassistant
    id: sensor_stookwijzer
    entity_id: sensor.stookwijzer
    on_value:
      - if:
          condition:
            lambda: |-
              return (0 == x.compare(std::string{"code_yellow"})) ;
          then:
            - lvgl.label.update:
                id: stookwijzer_label
                text: " \U000F0238"
                text_color: tft_yellow
          else:
            - lvgl.label.update:
                id: stookwijzer_label
                text: " \U000F0238"
                text_color: 0xFF3000 # red



# sensor.afvalinfo_huize_dartheide_trash_type_tomorrow
  - platform: homeassistant
    id: sensor_afval
    entity_id: sensor.afvalinfo_huize_dartheide_trash_type_tomorrow
    on_value:
      - if:
          condition:
            lambda: |-
              return (0 == x.compare(std::string{"geen"})) ;
          then:
            - lvgl.widget.hide: afval_label
            - lvgl.widget.hide: afval_label2
            
          else:
            - lvgl.label.update:
                id: afval_label
                text: !lambda 'return x.c_str();'

globals:
 
  # Initialize x positions for forecast icons (1-5)
  - id: x_forecast
    type: int[6]
    restore_value: no
    initial_value: '{0,0,0,0,0,0}'

  # Initialize forecast condition strings (1-5)
  - id: forecast_condition
    type: std::array<std::string, 6>
    restore_value: no
    initial_value: '{"","","","","",""}'

  # Initialize forecast precipitation values (1-5)
  - id: forecast_precip
    type: float[6]
    restore_value: no
    initial_value: '{0.0,0.0,0.0,0.0,0.0,0.0}'

  # Initialize forecast minimum temperatures (1-5)
  - id: forecast_temp_min
    type: float[6]
    restore_value: no
    initial_value: '{0.0,0.0,0.0,0.0,0.0,0.0}'

  # Initialize forecast maximum temperatures (1-5)
  - id: forecast_temp_max
    type: float[6]
    restore_value: no
    initial_value: '{0.0,0.0,0.0,0.0,0.0,0.0}'

  # Day names (short)
  - id: day_names
    type: std::array<const char *, 8>
    restore_value: no
    initial_value: '{"", "Dom", "Lun", "Mar", "Mer", "Gio", "Ven", "Sab"}'

  # Day names (extended)
  - id: day_names_ext
    type: std::array<const char *, 8>
    restore_value: no
    initial_value: '{"", "Domenica", "Lunedì", "Martedì", "Mercoledì", "Giovedì", "Venerdì", "Sabato"}'

  # Month names
  - id: month_names
    type: std::array<const char *, 13>
    restore_value: no
    initial_value: '{"", "Gen", "Feb", "Mar", "Apr", "Mag", "Giu", "Lug", "Ago", "Set", "Ott", "Nov", "Dic"}'

